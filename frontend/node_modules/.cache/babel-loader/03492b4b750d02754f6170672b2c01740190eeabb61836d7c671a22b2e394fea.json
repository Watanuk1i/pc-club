{"ast":null,"code":"var _NotificationService;\nimport axios from 'axios';\nclass NotificationService {\n  constructor() {\n    this.socket = null;\n    this.userId = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = 5000;\n    // Задержка инициализации WebSocket для уменьшения нагрузки при старте\n    setTimeout(() => this.initWebSocket(), 2000);\n  }\n  static getInstance() {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n  initWebSocket() {\n    try {\n      var _window$Telegram, _this$socket;\n      // Проверяем, доступен ли Telegram WebApp\n      if ((_window$Telegram = window.Telegram) !== null && _window$Telegram !== void 0 && _window$Telegram.WebApp) {\n        const tg = window.Telegram.WebApp;\n        this.userId = tg.initDataUnsafe.user.id.toString();\n      } else {\n        // Если нет, используем временный ID\n        this.userId = 'web-user';\n      }\n      if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) {\n        return; // Соединение уже установлено\n      }\n      this.socket = new WebSocket(`ws://localhost:8000/ws/notifications/${this.userId}`);\n      this.socket.onopen = () => {\n        console.log('WebSocket соединение установлено');\n        this.reconnectAttempts = 0; // Сбрасываем счетчик попыток при успешном подключении\n      };\n      this.socket.onmessage = event => {\n        const notification = JSON.parse(event.data);\n        this.handleNewNotification(notification);\n      };\n      this.socket.onerror = error => {\n        console.error('Ошибка WebSocket:', error);\n      };\n      this.socket.onclose = () => {\n        this.reconnectAttempts++;\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          console.log(`Попытка переподключения ${this.reconnectAttempts} из ${this.maxReconnectAttempts}`);\n          setTimeout(() => this.initWebSocket(), this.reconnectTimeout);\n        } else {\n          console.log('Достигнуто максимальное количество попыток переподключения');\n        }\n      };\n    } catch (error) {\n      console.error('Ошибка при инициализации WebSocket:', error);\n    }\n  }\n  handleNewNotification(notification) {\n    try {\n      var _window$Telegram2;\n      // Если доступен Telegram WebApp, отправляем уведомление через него\n      if ((_window$Telegram2 = window.Telegram) !== null && _window$Telegram2 !== void 0 && _window$Telegram2.WebApp) {\n        window.Telegram.WebApp.showAlert(notification.message);\n      }\n\n      // Запрашиваем разрешение на отправку уведомлений, если оно не предоставлено\n      if (Notification.permission === 'default') {\n        Notification.requestPermission();\n      }\n\n      // Отправляем системное уведомление, если разрешено\n      if (Notification.permission === 'granted') {\n        new Notification('PC Club', {\n          body: notification.message,\n          icon: '/favicon.ico'\n        });\n      }\n    } catch (error) {\n      console.error('Ошибка при обработке уведомления:', error);\n    }\n  }\n  async getNotifications() {\n    try {\n      if (!this.userId) {\n        return [];\n      }\n      const response = await axios.get(`/api/notifications/user/${this.userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Ошибка при получении уведомлений:', error);\n      return [];\n    }\n  }\n  async markAsRead(notificationId) {\n    try {\n      await axios.put(`/api/notifications/${notificationId}/read`);\n    } catch (error) {\n      console.error('Ошибка при отметке уведомления как прочитанного:', error);\n    }\n  }\n  async markAllAsRead() {\n    try {\n      if (!this.userId) {\n        return;\n      }\n      await axios.put(`/api/notifications/user/${this.userId}/read-all`);\n    } catch (error) {\n      console.error('Ошибка при отметке всех уведомлений как прочитанных:', error);\n    }\n  }\n}\n_NotificationService = NotificationService;\nNotificationService.instance = void 0;\nexport default NotificationService;","map":{"version":3,"names":["axios","NotificationService","constructor","socket","userId","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","setTimeout","initWebSocket","getInstance","instance","_window$Telegram","_this$socket","window","Telegram","WebApp","tg","initDataUnsafe","user","id","toString","readyState","WebSocket","OPEN","onopen","console","log","onmessage","event","notification","JSON","parse","data","handleNewNotification","onerror","error","onclose","_window$Telegram2","showAlert","message","Notification","permission","requestPermission","body","icon","getNotifications","response","get","markAsRead","notificationId","put","markAllAsRead","_NotificationService"],"sources":["C:/Users/USER/Desktop/PC_CLUB/frontend/src/services/NotificationService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Notification {\r\n  id: number;\r\n  type: 'info' | 'warning' | 'error' | 'success';\r\n  message: string;\r\n  created_at: string;\r\n  read: boolean;\r\n}\r\n\r\nclass NotificationService {\r\n  private static instance: NotificationService;\r\n  private socket: WebSocket | null = null;\r\n  private userId: string | null = null;\r\n  private reconnectAttempts: number = 0;\r\n  private maxReconnectAttempts: number = 5;\r\n  private reconnectTimeout: number = 5000;\r\n\r\n  private constructor() {\r\n    // Задержка инициализации WebSocket для уменьшения нагрузки при старте\r\n    setTimeout(() => this.initWebSocket(), 2000);\r\n  }\r\n\r\n  public static getInstance(): NotificationService {\r\n    if (!NotificationService.instance) {\r\n      NotificationService.instance = new NotificationService();\r\n    }\r\n    return NotificationService.instance;\r\n  }\r\n\r\n  private initWebSocket() {\r\n    try {\r\n      // Проверяем, доступен ли Telegram WebApp\r\n      if (window.Telegram?.WebApp) {\r\n        const tg = window.Telegram.WebApp;\r\n        this.userId = tg.initDataUnsafe.user.id.toString();\r\n      } else {\r\n        // Если нет, используем временный ID\r\n        this.userId = 'web-user';\r\n      }\r\n\r\n      if (this.socket?.readyState === WebSocket.OPEN) {\r\n        return; // Соединение уже установлено\r\n      }\r\n\r\n      this.socket = new WebSocket(`ws://localhost:8000/ws/notifications/${this.userId}`);\r\n      \r\n      this.socket.onopen = () => {\r\n        console.log('WebSocket соединение установлено');\r\n        this.reconnectAttempts = 0; // Сбрасываем счетчик попыток при успешном подключении\r\n      };\r\n\r\n      this.socket.onmessage = (event) => {\r\n        const notification = JSON.parse(event.data);\r\n        this.handleNewNotification(notification);\r\n      };\r\n\r\n      this.socket.onerror = (error) => {\r\n        console.error('Ошибка WebSocket:', error);\r\n      };\r\n\r\n      this.socket.onclose = () => {\r\n        this.reconnectAttempts++;\r\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n          console.log(`Попытка переподключения ${this.reconnectAttempts} из ${this.maxReconnectAttempts}`);\r\n          setTimeout(() => this.initWebSocket(), this.reconnectTimeout);\r\n        } else {\r\n          console.log('Достигнуто максимальное количество попыток переподключения');\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Ошибка при инициализации WebSocket:', error);\r\n    }\r\n  }\r\n\r\n  private handleNewNotification(notification: Notification) {\r\n    try {\r\n      // Если доступен Telegram WebApp, отправляем уведомление через него\r\n      if (window.Telegram?.WebApp) {\r\n        window.Telegram.WebApp.showAlert(notification.message);\r\n      }\r\n      \r\n      // Запрашиваем разрешение на отправку уведомлений, если оно не предоставлено\r\n      if (Notification.permission === 'default') {\r\n        Notification.requestPermission();\r\n      }\r\n      \r\n      // Отправляем системное уведомление, если разрешено\r\n      if (Notification.permission === 'granted') {\r\n        new Notification('PC Club', { \r\n          body: notification.message,\r\n          icon: '/favicon.ico'\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при обработке уведомления:', error);\r\n    }\r\n  }\r\n\r\n  public async getNotifications(): Promise<Notification[]> {\r\n    try {\r\n      if (!this.userId) {\r\n        return [];\r\n      }\r\n      const response = await axios.get(`/api/notifications/user/${this.userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Ошибка при получении уведомлений:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  public async markAsRead(notificationId: number): Promise<void> {\r\n    try {\r\n      await axios.put(`/api/notifications/${notificationId}/read`);\r\n    } catch (error) {\r\n      console.error('Ошибка при отметке уведомления как прочитанного:', error);\r\n    }\r\n  }\r\n\r\n  public async markAllAsRead(): Promise<void> {\r\n    try {\r\n      if (!this.userId) {\r\n        return;\r\n      }\r\n      await axios.put(`/api/notifications/user/${this.userId}/read-all`);\r\n    } catch (error) {\r\n      console.error('Ошибка при отметке всех уведомлений как прочитанных:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default NotificationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}