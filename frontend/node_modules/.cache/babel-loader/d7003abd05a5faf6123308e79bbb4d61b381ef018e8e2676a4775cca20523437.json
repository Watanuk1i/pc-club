{"ast":null,"code":"var _NotificationService;\nimport axios from 'axios';\nclass NotificationService {\n  constructor() {\n    this.socket = null;\n    this.userId = null;\n    this.initWebSocket();\n  }\n  static getInstance() {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n  initWebSocket() {\n    try {\n      var _window$Telegram;\n      // Проверяем, доступен ли Telegram WebApp\n      if ((_window$Telegram = window.Telegram) !== null && _window$Telegram !== void 0 && _window$Telegram.WebApp) {\n        const tg = window.Telegram.WebApp;\n        this.userId = tg.initDataUnsafe.user.id.toString();\n      } else {\n        // Если нет, используем временный ID\n        this.userId = 'web-user';\n      }\n      this.socket = new WebSocket(`ws://localhost:8000/ws/notifications/${this.userId}`);\n      this.socket.onmessage = event => {\n        const notification = JSON.parse(event.data);\n        this.handleNewNotification(notification);\n      };\n      this.socket.onclose = () => {\n        setTimeout(() => this.initWebSocket(), 5000);\n      };\n    } catch (error) {\n      console.error('Ошибка при инициализации WebSocket:', error);\n    }\n  }\n  handleNewNotification(notification) {\n    try {\n      var _window$Telegram2;\n      // Если доступен Telegram WebApp, отправляем уведомление через него\n      if ((_window$Telegram2 = window.Telegram) !== null && _window$Telegram2 !== void 0 && _window$Telegram2.WebApp) {\n        window.Telegram.WebApp.showAlert(notification.message);\n      }\n\n      // Также используем системные уведомления, если разрешено\n      if (Notification.permission === 'granted') {\n        new Notification('PC Club', {\n          body: notification.message\n        });\n      }\n    } catch (error) {\n      console.error('Ошибка при обработке уведомления:', error);\n    }\n  }\n  async getNotifications() {\n    try {\n      const response = await axios.get(`/api/notifications/user/${this.userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Ошибка при получении уведомлений:', error);\n      return [];\n    }\n  }\n  async markAsRead(notificationId) {\n    try {\n      await axios.put(`/api/notifications/${notificationId}/read`);\n    } catch (error) {\n      console.error('Ошибка при отметке уведомления как прочитанного:', error);\n    }\n  }\n  async markAllAsRead() {\n    try {\n      await axios.put(`/api/notifications/user/${this.userId}/read-all`);\n    } catch (error) {\n      console.error('Ошибка при отметке всех уведомлений как прочитанных:', error);\n    }\n  }\n}\n_NotificationService = NotificationService;\nNotificationService.instance = void 0;\nexport default NotificationService;","map":{"version":3,"names":["axios","NotificationService","constructor","socket","userId","initWebSocket","getInstance","instance","_window$Telegram","window","Telegram","WebApp","tg","initDataUnsafe","user","id","toString","WebSocket","onmessage","event","notification","JSON","parse","data","handleNewNotification","onclose","setTimeout","error","console","_window$Telegram2","showAlert","message","Notification","permission","body","getNotifications","response","get","markAsRead","notificationId","put","markAllAsRead","_NotificationService"],"sources":["C:/Users/USER/Desktop/PC_CLUB/frontend/src/services/NotificationService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Notification {\r\n  id: number;\r\n  type: 'info' | 'warning' | 'error' | 'success';\r\n  message: string;\r\n  created_at: string;\r\n  read: boolean;\r\n}\r\n\r\nclass NotificationService {\r\n  private static instance: NotificationService;\r\n  private socket: WebSocket | null = null;\r\n  private userId: string | null = null;\r\n\r\n  private constructor() {\r\n    this.initWebSocket();\r\n  }\r\n\r\n  public static getInstance(): NotificationService {\r\n    if (!NotificationService.instance) {\r\n      NotificationService.instance = new NotificationService();\r\n    }\r\n    return NotificationService.instance;\r\n  }\r\n\r\n  private initWebSocket() {\r\n    try {\r\n      // Проверяем, доступен ли Telegram WebApp\r\n      if (window.Telegram?.WebApp) {\r\n        const tg = window.Telegram.WebApp;\r\n        this.userId = tg.initDataUnsafe.user.id.toString();\r\n      } else {\r\n        // Если нет, используем временный ID\r\n        this.userId = 'web-user';\r\n      }\r\n\r\n      this.socket = new WebSocket(`ws://localhost:8000/ws/notifications/${this.userId}`);\r\n      \r\n      this.socket.onmessage = (event) => {\r\n        const notification = JSON.parse(event.data);\r\n        this.handleNewNotification(notification);\r\n      };\r\n\r\n      this.socket.onclose = () => {\r\n        setTimeout(() => this.initWebSocket(), 5000);\r\n      };\r\n    } catch (error) {\r\n      console.error('Ошибка при инициализации WebSocket:', error);\r\n    }\r\n  }\r\n\r\n  private handleNewNotification(notification: Notification) {\r\n    try {\r\n      // Если доступен Telegram WebApp, отправляем уведомление через него\r\n      if (window.Telegram?.WebApp) {\r\n        window.Telegram.WebApp.showAlert(notification.message);\r\n      }\r\n      \r\n      // Также используем системные уведомления, если разрешено\r\n      if (Notification.permission === 'granted') {\r\n        new Notification('PC Club', { body: notification.message });\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при обработке уведомления:', error);\r\n    }\r\n  }\r\n\r\n  public async getNotifications(): Promise<Notification[]> {\r\n    try {\r\n      const response = await axios.get(`/api/notifications/user/${this.userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Ошибка при получении уведомлений:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  public async markAsRead(notificationId: number): Promise<void> {\r\n    try {\r\n      await axios.put(`/api/notifications/${notificationId}/read`);\r\n    } catch (error) {\r\n      console.error('Ошибка при отметке уведомления как прочитанного:', error);\r\n    }\r\n  }\r\n\r\n  public async markAllAsRead(): Promise<void> {\r\n    try {\r\n      await axios.put(`/api/notifications/user/${this.userId}/read-all`);\r\n    } catch (error) {\r\n      console.error('Ошибка при отметке всех уведомлений как прочитанных:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default NotificationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}