{"ast":null,"code":"const generateComputers = () => {\n  const computers = [];\n\n  // Генерируем стандартные ПК\n  for (let i = 1; i <= 15; i++) {\n    computers.push({\n      id: i,\n      name: `PC ${i}`,\n      type: 'pc',\n      zone: 'Стандарт',\n      status: Math.random() > 0.7 ? 'busy' : Math.random() > 0.9 ? 'maintenance' : 'free',\n      specs: {\n        cpu: 'Intel Core i7-13700K',\n        gpu: 'NVIDIA RTX 4070',\n        ram: '32GB DDR5',\n        monitor: '240Hz 27\" ASUS TUF'\n      },\n      price: 100\n    });\n  }\n\n  // Генерируем VIP буткемпы\n  for (let camp = 1; camp <= 3; camp++) {\n    for (let i = 1; i <= 5; i++) {\n      computers.push({\n        id: 15 + (camp - 1) * 5 + i,\n        name: `VIP ${i}`,\n        type: 'pc',\n        zone: 'VIP',\n        bootcamp: camp,\n        status: Math.random() > 0.7 ? 'busy' : Math.random() > 0.9 ? 'maintenance' : 'free',\n        specs: {\n          cpu: 'Intel Core i9-13900K',\n          gpu: 'NVIDIA RTX 4090',\n          ram: '64GB DDR5',\n          monitor: '360Hz 27\" ASUS ROG'\n        },\n        price: 200\n      });\n    }\n  }\n\n  // Добавляем ТВ зоны\n  const tvZones = [{\n    id: 31,\n    name: 'PlayStation 5',\n    type: 'tv',\n    zone: 'TV Zone',\n    status: 'free',\n    specs: {\n      cpu: 'PlayStation 5',\n      gpu: 'AMD RDNA 2',\n      ram: '16GB GDDR6',\n      monitor: '65\" 4K HDR TV'\n    },\n    price: 250\n  }, {\n    id: 32,\n    name: 'Xbox Series X',\n    type: 'tv',\n    zone: 'TV Zone',\n    status: 'busy',\n    specs: {\n      cpu: 'Xbox Series X',\n      gpu: 'AMD RDNA 2',\n      ram: '16GB GDDR6',\n      monitor: '65\" 4K HDR TV'\n    },\n    price: 250\n  }, {\n    id: 33,\n    name: 'Nintendo Switch',\n    type: 'tv',\n    zone: 'TV Zone',\n    status: 'free',\n    specs: {\n      cpu: 'Nintendo Switch',\n      gpu: 'NVIDIA Tegra X1',\n      ram: '4GB',\n      monitor: '55\" 4K HDR TV'\n    },\n    price: 200\n  }];\n  return [...computers, ...tvZones];\n};\nexport const mockComputers = generateComputers();\nexport const getComputersByZone = () => {\n  const zones = new Map();\n  mockComputers.forEach(computer => {\n    if (!zones.has(computer.zone)) {\n      zones.set(computer.zone, new Map([[null, []]]));\n    }\n    const zoneMap = zones.get(computer.zone);\n    if (computer.bootcamp) {\n      var _zoneMap$get;\n      if (!zoneMap.has(computer.bootcamp)) {\n        zoneMap.set(computer.bootcamp, []);\n      }\n      (_zoneMap$get = zoneMap.get(computer.bootcamp)) === null || _zoneMap$get === void 0 ? void 0 : _zoneMap$get.push(computer);\n    } else {\n      var _zoneMap$get2;\n      (_zoneMap$get2 = zoneMap.get(null)) === null || _zoneMap$get2 === void 0 ? void 0 : _zoneMap$get2.push(computer);\n    }\n  });\n  return zones;\n};\nexport const getStatusColor = status => {\n  switch (status) {\n    case 'free':\n      return 'success';\n    case 'busy':\n      return 'error';\n    case 'maintenance':\n      return 'warning';\n    default:\n      return 'default';\n  }\n};\nexport const getStatusText = status => {\n  switch (status) {\n    case 'free':\n      return 'Свободен';\n    case 'busy':\n      return 'Занят';\n    case 'maintenance':\n      return 'Обслуживание';\n    default:\n      return status;\n  }\n};","map":{"version":3,"names":["generateComputers","computers","i","push","id","name","type","zone","status","Math","random","specs","cpu","gpu","ram","monitor","price","camp","bootcamp","tvZones","mockComputers","getComputersByZone","zones","Map","forEach","computer","has","set","zoneMap","get","_zoneMap$get","_zoneMap$get2","getStatusColor","getStatusText"],"sources":["C:/Users/USER/Desktop/PC_CLUB/frontend/src/mocks/computersMock.ts"],"sourcesContent":["export interface Computer {\r\n  id: number;\r\n  name: string;\r\n  type: 'pc' | 'tv';\r\n  zone: string;\r\n  bootcamp?: number;\r\n  status: 'free' | 'busy' | 'maintenance';\r\n  specs?: {\r\n    cpu: string;\r\n    gpu: string;\r\n    ram: string;\r\n    monitor: string;\r\n  };\r\n  price: number;\r\n}\r\n\r\nconst generateComputers = (): Computer[] => {\r\n  const computers: Computer[] = [];\r\n\r\n  // Генерируем стандартные ПК\r\n  for (let i = 1; i <= 15; i++) {\r\n    computers.push({\r\n      id: i,\r\n      name: `PC ${i}`,\r\n      type: 'pc',\r\n      zone: 'Стандарт',\r\n      status: Math.random() > 0.7 ? 'busy' : Math.random() > 0.9 ? 'maintenance' : 'free',\r\n      specs: {\r\n        cpu: 'Intel Core i7-13700K',\r\n        gpu: 'NVIDIA RTX 4070',\r\n        ram: '32GB DDR5',\r\n        monitor: '240Hz 27\" ASUS TUF'\r\n      },\r\n      price: 100\r\n    });\r\n  }\r\n\r\n  // Генерируем VIP буткемпы\r\n  for (let camp = 1; camp <= 3; camp++) {\r\n    for (let i = 1; i <= 5; i++) {\r\n      computers.push({\r\n        id: 15 + (camp - 1) * 5 + i,\r\n        name: `VIP ${i}`,\r\n        type: 'pc',\r\n        zone: 'VIP',\r\n        bootcamp: camp,\r\n        status: Math.random() > 0.7 ? 'busy' : Math.random() > 0.9 ? 'maintenance' : 'free',\r\n        specs: {\r\n          cpu: 'Intel Core i9-13900K',\r\n          gpu: 'NVIDIA RTX 4090',\r\n          ram: '64GB DDR5',\r\n          monitor: '360Hz 27\" ASUS ROG'\r\n        },\r\n        price: 200\r\n      });\r\n    }\r\n  }\r\n\r\n  // Добавляем ТВ зоны\r\n  const tvZones: Computer[] = [\r\n    {\r\n      id: 31,\r\n      name: 'PlayStation 5',\r\n      type: 'tv' as const,\r\n      zone: 'TV Zone',\r\n      status: 'free',\r\n      specs: {\r\n        cpu: 'PlayStation 5',\r\n        gpu: 'AMD RDNA 2',\r\n        ram: '16GB GDDR6',\r\n        monitor: '65\" 4K HDR TV'\r\n      },\r\n      price: 250\r\n    },\r\n    {\r\n      id: 32,\r\n      name: 'Xbox Series X',\r\n      type: 'tv' as const,\r\n      zone: 'TV Zone',\r\n      status: 'busy',\r\n      specs: {\r\n        cpu: 'Xbox Series X',\r\n        gpu: 'AMD RDNA 2',\r\n        ram: '16GB GDDR6',\r\n        monitor: '65\" 4K HDR TV'\r\n      },\r\n      price: 250\r\n    },\r\n    {\r\n      id: 33,\r\n      name: 'Nintendo Switch',\r\n      type: 'tv' as const,\r\n      zone: 'TV Zone',\r\n      status: 'free',\r\n      specs: {\r\n        cpu: 'Nintendo Switch',\r\n        gpu: 'NVIDIA Tegra X1',\r\n        ram: '4GB',\r\n        monitor: '55\" 4K HDR TV'\r\n      },\r\n      price: 200\r\n    }\r\n  ];\r\n\r\n  return [...computers, ...tvZones];\r\n};\r\n\r\nexport const mockComputers = generateComputers();\r\n\r\nexport const getComputersByZone = () => {\r\n  const zones = new Map<string, Map<number | null, Computer[]>>();\r\n  \r\n  mockComputers.forEach(computer => {\r\n    if (!zones.has(computer.zone)) {\r\n      zones.set(computer.zone, new Map([[null, []]]));\r\n    }\r\n    \r\n    const zoneMap = zones.get(computer.zone)!;\r\n    \r\n    if (computer.bootcamp) {\r\n      if (!zoneMap.has(computer.bootcamp)) {\r\n        zoneMap.set(computer.bootcamp, []);\r\n      }\r\n      zoneMap.get(computer.bootcamp)?.push(computer);\r\n    } else {\r\n      zoneMap.get(null)?.push(computer);\r\n    }\r\n  });\r\n\r\n  return zones;\r\n};\r\n\r\nexport const getStatusColor = (status: string) => {\r\n  switch (status) {\r\n    case 'free':\r\n      return 'success';\r\n    case 'busy':\r\n      return 'error';\r\n    case 'maintenance':\r\n      return 'warning';\r\n    default:\r\n      return 'default';\r\n  }\r\n};\r\n\r\nexport const getStatusText = (status: string) => {\r\n  switch (status) {\r\n    case 'free':\r\n      return 'Свободен';\r\n    case 'busy':\r\n      return 'Занят';\r\n    case 'maintenance':\r\n      return 'Обслуживание';\r\n    default:\r\n      return status;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}