{"ast":null,"code":"const generateComputers = () => {\n  const computers = [];\n\n  // Генерируем ПК\n  for (let i = 1; i <= 30; i++) {\n    computers.push({\n      id: i,\n      name: `PC ${i}`,\n      type: 'pc',\n      zone: i <= 10 ? 'Основной зал' : i <= 20 ? 'VIP зона' : 'Турнирная зона',\n      status: Math.random() > 0.7 ? 'busy' : Math.random() > 0.9 ? 'maintenance' : 'free',\n      specs: {\n        cpu: 'Intel Core i9-13900K',\n        gpu: 'NVIDIA RTX 4090',\n        ram: '64GB DDR5',\n        monitor: '360Hz 27\" ASUS ROG'\n      },\n      price: i <= 10 ? 100 : i <= 20 ? 150 : 200\n    });\n  }\n\n  // Добавляем ТВ зоны\n  const tvZones = [{\n    id: 31,\n    name: 'TV Zone 1 - PlayStation 5',\n    type: 'tv',\n    zone: 'Консольная зона',\n    status: 'free',\n    specs: {\n      cpu: 'PlayStation 5',\n      gpu: 'AMD RDNA 2',\n      ram: '16GB GDDR6',\n      monitor: '65\" 4K HDR TV'\n    },\n    price: 250\n  }, {\n    id: 32,\n    name: 'TV Zone 2 - Xbox Series X',\n    type: 'tv',\n    zone: 'Консольная зона',\n    status: 'busy',\n    specs: {\n      cpu: 'Xbox Series X',\n      gpu: 'AMD RDNA 2',\n      ram: '16GB GDDR6',\n      monitor: '65\" 4K HDR TV'\n    },\n    price: 250\n  }, {\n    id: 33,\n    name: 'TV Zone 3 - Nintendo Switch',\n    type: 'tv',\n    zone: 'Консольная зона',\n    status: 'free',\n    specs: {\n      cpu: 'Nintendo Switch',\n      gpu: 'NVIDIA Tegra X1',\n      ram: '4GB',\n      monitor: '55\" 4K HDR TV'\n    },\n    price: 200\n  }];\n  return [...computers, ...tvZones];\n};\nexport const mockComputers = generateComputers();\nexport const getComputersByZone = () => {\n  const zones = new Map();\n  mockComputers.forEach(computer => {\n    var _zones$get;\n    if (!zones.has(computer.zone)) {\n      zones.set(computer.zone, []);\n    }\n    (_zones$get = zones.get(computer.zone)) === null || _zones$get === void 0 ? void 0 : _zones$get.push(computer);\n  });\n  return zones;\n};\nexport const getStatusColor = status => {\n  switch (status) {\n    case 'free':\n      return 'success';\n    case 'busy':\n      return 'error';\n    case 'maintenance':\n      return 'warning';\n    default:\n      return 'default';\n  }\n};\nexport const getStatusText = status => {\n  switch (status) {\n    case 'free':\n      return 'Свободен';\n    case 'busy':\n      return 'Занят';\n    case 'maintenance':\n      return 'Обслуживание';\n    default:\n      return status;\n  }\n};","map":{"version":3,"names":["generateComputers","computers","i","push","id","name","type","zone","status","Math","random","specs","cpu","gpu","ram","monitor","price","tvZones","mockComputers","getComputersByZone","zones","Map","forEach","computer","_zones$get","has","set","get","getStatusColor","getStatusText"],"sources":["C:/Users/USER/Desktop/PC_CLUB/frontend/src/mocks/computersMock.ts"],"sourcesContent":["export interface Computer {\r\n  id: number;\r\n  name: string;\r\n  type: 'pc' | 'tv';\r\n  zone: string;\r\n  status: 'free' | 'busy' | 'maintenance';\r\n  specs?: {\r\n    cpu: string;\r\n    gpu: string;\r\n    ram: string;\r\n    monitor: string;\r\n  };\r\n  price: number;\r\n}\r\n\r\nconst generateComputers = (): Computer[] => {\r\n  const computers: Computer[] = [];\r\n\r\n  // Генерируем ПК\r\n  for (let i = 1; i <= 30; i++) {\r\n    computers.push({\r\n      id: i,\r\n      name: `PC ${i}`,\r\n      type: 'pc',\r\n      zone: i <= 10 ? 'Основной зал' : i <= 20 ? 'VIP зона' : 'Турнирная зона',\r\n      status: Math.random() > 0.7 ? 'busy' : Math.random() > 0.9 ? 'maintenance' : 'free',\r\n      specs: {\r\n        cpu: 'Intel Core i9-13900K',\r\n        gpu: 'NVIDIA RTX 4090',\r\n        ram: '64GB DDR5',\r\n        monitor: '360Hz 27\" ASUS ROG'\r\n      },\r\n      price: i <= 10 ? 100 : i <= 20 ? 150 : 200\r\n    });\r\n  }\r\n\r\n  // Добавляем ТВ зоны\r\n  const tvZones = [\r\n    {\r\n      id: 31,\r\n      name: 'TV Zone 1 - PlayStation 5',\r\n      type: 'tv',\r\n      zone: 'Консольная зона',\r\n      status: 'free',\r\n      specs: {\r\n        cpu: 'PlayStation 5',\r\n        gpu: 'AMD RDNA 2',\r\n        ram: '16GB GDDR6',\r\n        monitor: '65\" 4K HDR TV'\r\n      },\r\n      price: 250\r\n    },\r\n    {\r\n      id: 32,\r\n      name: 'TV Zone 2 - Xbox Series X',\r\n      type: 'tv',\r\n      zone: 'Консольная зона',\r\n      status: 'busy',\r\n      specs: {\r\n        cpu: 'Xbox Series X',\r\n        gpu: 'AMD RDNA 2',\r\n        ram: '16GB GDDR6',\r\n        monitor: '65\" 4K HDR TV'\r\n      },\r\n      price: 250\r\n    },\r\n    {\r\n      id: 33,\r\n      name: 'TV Zone 3 - Nintendo Switch',\r\n      type: 'tv',\r\n      zone: 'Консольная зона',\r\n      status: 'free',\r\n      specs: {\r\n        cpu: 'Nintendo Switch',\r\n        gpu: 'NVIDIA Tegra X1',\r\n        ram: '4GB',\r\n        monitor: '55\" 4K HDR TV'\r\n      },\r\n      price: 200\r\n    }\r\n  ];\r\n\r\n  return [...computers, ...tvZones];\r\n};\r\n\r\nexport const mockComputers = generateComputers();\r\n\r\nexport const getComputersByZone = () => {\r\n  const zones = new Map<string, Computer[]>();\r\n  \r\n  mockComputers.forEach(computer => {\r\n    if (!zones.has(computer.zone)) {\r\n      zones.set(computer.zone, []);\r\n    }\r\n    zones.get(computer.zone)?.push(computer);\r\n  });\r\n\r\n  return zones;\r\n};\r\n\r\nexport const getStatusColor = (status: string) => {\r\n  switch (status) {\r\n    case 'free':\r\n      return 'success';\r\n    case 'busy':\r\n      return 'error';\r\n    case 'maintenance':\r\n      return 'warning';\r\n    default:\r\n      return 'default';\r\n  }\r\n};\r\n\r\nexport const getStatusText = (status: string) => {\r\n  switch (status) {\r\n    case 'free':\r\n      return 'Свободен';\r\n    case 'busy':\r\n      return 'Занят';\r\n    case 'maintenance':\r\n      return 'Обслуживание';\r\n    default:\r\n      return status;\r\n  }\r\n}; "],"mappings":"AAeA,MAAMA,iBAAiB,GAAGA,CAAA,KAAkB;EAC1C,MAAMC,SAAqB,GAAG,EAAE;;EAEhC;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC5BD,SAAS,CAACE,IAAI,CAAC;MACbC,EAAE,EAAEF,CAAC;MACLG,IAAI,EAAE,MAAMH,CAAC,EAAE;MACfI,IAAI,EAAE,IAAI;MACVC,IAAI,EAAEL,CAAC,IAAI,EAAE,GAAG,cAAc,GAAGA,CAAC,IAAI,EAAE,GAAG,UAAU,GAAG,gBAAgB;MACxEM,MAAM,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,aAAa,GAAG,MAAM;MACnFC,KAAK,EAAE;QACLC,GAAG,EAAE,sBAAsB;QAC3BC,GAAG,EAAE,iBAAiB;QACtBC,GAAG,EAAE,WAAW;QAChBC,OAAO,EAAE;MACX,CAAC;MACDC,KAAK,EAAEd,CAAC,IAAI,EAAE,GAAG,GAAG,GAAGA,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG;IACzC,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMe,OAAO,GAAG,CACd;IACEb,EAAE,EAAE,EAAE;IACNC,IAAI,EAAE,2BAA2B;IACjCC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,iBAAiB;IACvBC,MAAM,EAAE,MAAM;IACdG,KAAK,EAAE;MACLC,GAAG,EAAE,eAAe;MACpBC,GAAG,EAAE,YAAY;MACjBC,GAAG,EAAE,YAAY;MACjBC,OAAO,EAAE;IACX,CAAC;IACDC,KAAK,EAAE;EACT,CAAC,EACD;IACEZ,EAAE,EAAE,EAAE;IACNC,IAAI,EAAE,2BAA2B;IACjCC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,iBAAiB;IACvBC,MAAM,EAAE,MAAM;IACdG,KAAK,EAAE;MACLC,GAAG,EAAE,eAAe;MACpBC,GAAG,EAAE,YAAY;MACjBC,GAAG,EAAE,YAAY;MACjBC,OAAO,EAAE;IACX,CAAC;IACDC,KAAK,EAAE;EACT,CAAC,EACD;IACEZ,EAAE,EAAE,EAAE;IACNC,IAAI,EAAE,6BAA6B;IACnCC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,iBAAiB;IACvBC,MAAM,EAAE,MAAM;IACdG,KAAK,EAAE;MACLC,GAAG,EAAE,iBAAiB;MACtBC,GAAG,EAAE,iBAAiB;MACtBC,GAAG,EAAE,KAAK;MACVC,OAAO,EAAE;IACX,CAAC;IACDC,KAAK,EAAE;EACT,CAAC,CACF;EAED,OAAO,CAAC,GAAGf,SAAS,EAAE,GAAGgB,OAAO,CAAC;AACnC,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGlB,iBAAiB,CAAC,CAAC;AAEhD,OAAO,MAAMmB,kBAAkB,GAAGA,CAAA,KAAM;EACtC,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAAqB,CAAC;EAE3CH,aAAa,CAACI,OAAO,CAACC,QAAQ,IAAI;IAAA,IAAAC,UAAA;IAChC,IAAI,CAACJ,KAAK,CAACK,GAAG,CAACF,QAAQ,CAAChB,IAAI,CAAC,EAAE;MAC7Ba,KAAK,CAACM,GAAG,CAACH,QAAQ,CAAChB,IAAI,EAAE,EAAE,CAAC;IAC9B;IACA,CAAAiB,UAAA,GAAAJ,KAAK,CAACO,GAAG,CAACJ,QAAQ,CAAChB,IAAI,CAAC,cAAAiB,UAAA,uBAAxBA,UAAA,CAA0BrB,IAAI,CAACoB,QAAQ,CAAC;EAC1C,CAAC,CAAC;EAEF,OAAOH,KAAK;AACd,CAAC;AAED,OAAO,MAAMQ,cAAc,GAAIpB,MAAc,IAAK;EAChD,QAAQA,MAAM;IACZ,KAAK,MAAM;MACT,OAAO,SAAS;IAClB,KAAK,MAAM;MACT,OAAO,OAAO;IAChB,KAAK,aAAa;MAChB,OAAO,SAAS;IAClB;MACE,OAAO,SAAS;EACpB;AACF,CAAC;AAED,OAAO,MAAMqB,aAAa,GAAIrB,MAAc,IAAK;EAC/C,QAAQA,MAAM;IACZ,KAAK,MAAM;MACT,OAAO,UAAU;IACnB,KAAK,MAAM;MACT,OAAO,OAAO;IAChB,KAAK,aAAa;MAChB,OAAO,cAAc;IACvB;MACE,OAAOA,MAAM;EACjB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}