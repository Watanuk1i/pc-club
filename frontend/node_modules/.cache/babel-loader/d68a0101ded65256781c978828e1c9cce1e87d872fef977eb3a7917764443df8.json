{"ast":null,"code":"var _NotificationService;\nimport axios from 'axios';\nclass NotificationService {\n  constructor() {\n    this.socket = null;\n    this.initWebSocket();\n  }\n  static getInstance() {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n  initWebSocket() {\n    const tg = window.Telegram.WebApp;\n    this.socket = new WebSocket(`wss://your-server.com/ws/notifications/${tg.initDataUnsafe.user.id}`);\n    this.socket.onmessage = event => {\n      const notification = JSON.parse(event.data);\n      this.handleNewNotification(notification);\n    };\n    this.socket.onclose = () => {\n      setTimeout(() => this.initWebSocket(), 5000);\n    };\n  }\n  handleNewNotification(notification) {\n    // Отправляем уведомление в Telegram\n    const tg = window.Telegram.WebApp;\n    tg.showAlert(notification.message);\n\n    // Также можно использовать системные уведомления\n    if (Notification.permission === 'granted') {\n      new Notification('PC Club', {\n        body: notification.message\n      });\n    }\n  }\n  async getNotifications() {\n    const tg = window.Telegram.WebApp;\n    const response = await axios.get(`/api/notifications/user/${tg.initDataUnsafe.user.id}`);\n    return response.data;\n  }\n  async markAsRead(notificationId) {\n    await axios.put(`/api/notifications/${notificationId}/read`);\n  }\n  async markAllAsRead() {\n    const tg = window.Telegram.WebApp;\n    await axios.put(`/api/notifications/user/${tg.initDataUnsafe.user.id}/read-all`);\n  }\n}\n_NotificationService = NotificationService;\nNotificationService.instance = void 0;\nexport default NotificationService;","map":{"version":3,"names":["axios","NotificationService","constructor","socket","initWebSocket","getInstance","instance","tg","window","Telegram","WebApp","WebSocket","initDataUnsafe","user","id","onmessage","event","notification","JSON","parse","data","handleNewNotification","onclose","setTimeout","showAlert","message","Notification","permission","body","getNotifications","response","get","markAsRead","notificationId","put","markAllAsRead","_NotificationService"],"sources":["C:/Users/USER/Desktop/PC_CLUB/frontend/src/services/NotificationService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport interface Notification {\r\n  id: number;\r\n  type: 'info' | 'warning' | 'error' | 'success';\r\n  message: string;\r\n  created_at: string;\r\n  read: boolean;\r\n}\r\n\r\nclass NotificationService {\r\n  private static instance: NotificationService;\r\n  private socket: WebSocket | null = null;\r\n\r\n  private constructor() {\r\n    this.initWebSocket();\r\n  }\r\n\r\n  public static getInstance(): NotificationService {\r\n    if (!NotificationService.instance) {\r\n      NotificationService.instance = new NotificationService();\r\n    }\r\n    return NotificationService.instance;\r\n  }\r\n\r\n  private initWebSocket() {\r\n    const tg = window.Telegram.WebApp;\r\n    this.socket = new WebSocket(`wss://your-server.com/ws/notifications/${tg.initDataUnsafe.user.id}`);\r\n    \r\n    this.socket.onmessage = (event) => {\r\n      const notification = JSON.parse(event.data);\r\n      this.handleNewNotification(notification);\r\n    };\r\n\r\n    this.socket.onclose = () => {\r\n      setTimeout(() => this.initWebSocket(), 5000);\r\n    };\r\n  }\r\n\r\n  private handleNewNotification(notification: Notification) {\r\n    // Отправляем уведомление в Telegram\r\n    const tg = window.Telegram.WebApp;\r\n    tg.showAlert(notification.message);\r\n    \r\n    // Также можно использовать системные уведомления\r\n    if (Notification.permission === 'granted') {\r\n      new Notification('PC Club', { body: notification.message });\r\n    }\r\n  }\r\n\r\n  public async getNotifications(): Promise<Notification[]> {\r\n    const tg = window.Telegram.WebApp;\r\n    const response = await axios.get(`/api/notifications/user/${tg.initDataUnsafe.user.id}`);\r\n    return response.data;\r\n  }\r\n\r\n  public async markAsRead(notificationId: number): Promise<void> {\r\n    await axios.put(`/api/notifications/${notificationId}/read`);\r\n  }\r\n\r\n  public async markAllAsRead(): Promise<void> {\r\n    const tg = window.Telegram.WebApp;\r\n    await axios.put(`/api/notifications/user/${tg.initDataUnsafe.user.id}/read-all`);\r\n  }\r\n}\r\n\r\nexport default NotificationService; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAUzB,MAAMC,mBAAmB,CAAC;EAIhBC,WAAWA,CAAA,EAAG;IAAA,KAFdC,MAAM,GAAqB,IAAI;IAGrC,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB;EAEA,OAAcC,WAAWA,CAAA,EAAwB;IAC/C,IAAI,CAACJ,mBAAmB,CAACK,QAAQ,EAAE;MACjCL,mBAAmB,CAACK,QAAQ,GAAG,IAAIL,mBAAmB,CAAC,CAAC;IAC1D;IACA,OAAOA,mBAAmB,CAACK,QAAQ;EACrC;EAEQF,aAAaA,CAAA,EAAG;IACtB,MAAMG,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;IACjC,IAAI,CAACP,MAAM,GAAG,IAAIQ,SAAS,CAAC,0CAA0CJ,EAAE,CAACK,cAAc,CAACC,IAAI,CAACC,EAAE,EAAE,CAAC;IAElG,IAAI,CAACX,MAAM,CAACY,SAAS,GAAIC,KAAK,IAAK;MACjC,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;MAC3C,IAAI,CAACC,qBAAqB,CAACJ,YAAY,CAAC;IAC1C,CAAC;IAED,IAAI,CAACd,MAAM,CAACmB,OAAO,GAAG,MAAM;MAC1BC,UAAU,CAAC,MAAM,IAAI,CAACnB,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC;IAC9C,CAAC;EACH;EAEQiB,qBAAqBA,CAACJ,YAA0B,EAAE;IACxD;IACA,MAAMV,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;IACjCH,EAAE,CAACiB,SAAS,CAACP,YAAY,CAACQ,OAAO,CAAC;;IAElC;IACA,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MACzC,IAAID,YAAY,CAAC,SAAS,EAAE;QAAEE,IAAI,EAAEX,YAAY,CAACQ;MAAQ,CAAC,CAAC;IAC7D;EACF;EAEA,MAAaI,gBAAgBA,CAAA,EAA4B;IACvD,MAAMtB,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;IACjC,MAAMoB,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,GAAG,CAAC,2BAA2BxB,EAAE,CAACK,cAAc,CAACC,IAAI,CAACC,EAAE,EAAE,CAAC;IACxF,OAAOgB,QAAQ,CAACV,IAAI;EACtB;EAEA,MAAaY,UAAUA,CAACC,cAAsB,EAAiB;IAC7D,MAAMjC,KAAK,CAACkC,GAAG,CAAC,sBAAsBD,cAAc,OAAO,CAAC;EAC9D;EAEA,MAAaE,aAAaA,CAAA,EAAkB;IAC1C,MAAM5B,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;IACjC,MAAMV,KAAK,CAACkC,GAAG,CAAC,2BAA2B3B,EAAE,CAACK,cAAc,CAACC,IAAI,CAACC,EAAE,WAAW,CAAC;EAClF;AACF;AAACsB,oBAAA,GAtDKnC,mBAAmB;AAAnBA,mBAAmB,CACRK,QAAQ;AAuDzB,eAAeL,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}